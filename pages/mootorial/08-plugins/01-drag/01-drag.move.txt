====== Drag.Move ======
Here is the [[http://mootools.net/docs/more/Drag/Drag.Move|documentation for Drag.Move.js]].

//Drag.Move// extends //[[00-drag|Drag]]// to support moving an element around the page. 

The usage is pretty straight forward:

<code javascript exec>
new Drag.Move($('fxTarget'));
</code>

It takes all the options that //Drag// takes and adds two new ones:
<html>
<dl>
	<dt>container</dt>
	<dd>(element) If an Element is passed, drag will be limited to the passed Element's size and position.</dd>
	<dt>droppables</dt>
	<dd>(array) The Elements that the draggable can drop into. The class's drop, enter, and leave events will be fired in conjunction with interaction with one of these elements.</dd>
</dl>
</html>

==== Element.makeDraggable() ====
//Element// has a shortcut that's really about the same number of characters (actually, it's one more), so it's not much of a shortcut. Still, it's easy enough to use:

<code javascript exec>
$('fxTarget').makeDraggable();
</code>

That's it. You're done. Now, if you want to do things like capture the location of the object when the user drops it (and then maybe send that info back to the server via ajax so you can remember its location for another visit), you can specify a bunch of additional options.

<code javascript exec>
$('fxTarget').makeDraggable({
	onStart: function() {
		console.log("start left: %s, top: %s", this.getLeft(), this.getTop());
	}.bind($('fxTarget')),
	onDrag: function() {
		console.log("drag start left: %s, top: %s", this.getLeft(), this.getTop());
	}.bind($('fxTarget'))
});
</code>	

There's more stuff you can add here like snapping, and container so that you can drag an element only within the confines of another. Snap let's you require the user to drag the element a certain distance before it starts to follow the mouse (the default is 6px).

<code javascript exec>
$('dragExample').makeDraggable({
	snap: 25,
	container: 'snapContainer'
});
</code>

<html><div id="snapContainer" style="height: 150px; width: 400px; border: 1px solid black;">
	<div id="dragExample" class="fxTarget" style="visibility:visible"></div>
</div></html>

If you want to keep a handle on the instance of the //Drag.Move// class so you can interact with it (for instance, to disable dragging at a later point), you can do so with either syntax:

<code javascript>
var myDraggable = new Drag.Move($(element), {options...});
var myDraggable = $(element).makeDraggable({options...});
</code>
